{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","fetchBlogs","a","fetch","res","json","fetchImages","mergeData","blogs","imgs","i","length","imageData","state","this","then","setState","console","log","cards","map","blog","key","id","className","style","width","src","download_url","alt","author","title","body","Fragment","aria-hidden","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAmFeA,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,WANmB,sBAMN,4BAAAC,EAAA,sEACOC,MAAM,8CADb,cACLC,EADK,gBAEEA,EAAIC,OAFN,mFANM,EAUnBC,YAVmB,sBAUL,4BAAAJ,EAAA,sEACMC,MAAM,kDADZ,cACNC,EADM,gBAECA,EAAIC,OAFL,mFAVK,EAenBE,UAfmB,sBAeP,gCAAAL,EAAA,sEACQ,EAAKD,aADb,cACNO,EADM,gBAEO,EAAKF,cAFZ,OAGV,IADIG,EAFM,OAGDC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCF,EAAME,GAAGE,UAAYH,EAAKC,GAJlB,yBAMHF,GANG,2CAbV,EAAKK,MAAQ,CACXL,MAAO,IAHQ,E,gEAwBE,IAAD,OAClBM,KAAKP,YACFQ,MAAK,SAAAP,GACJ,EAAKQ,SAAS,CAACR,UACfS,QAAQC,IAAI,UAAW,EAAKL,MAAML,Y,+BAG9B,IACAA,EAAUM,KAAKD,MAAfL,MACFW,EAAQX,EAAMG,OAClBH,EAAMY,KAAI,SAAAC,GAAI,OACZ,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,OAAOC,MAAO,CAACC,MAAO,UACjD,yBAAKF,UAAU,aACf,yBAAKA,UAAU,yBAAyBG,IAAKN,EAAKT,UAAUgB,aAAcC,IAAKR,EAAKT,UAAUkB,SAC5F,wBAAIN,UAAU,cAAcH,EAAKU,OACjC,2BAAIV,EAAKW,WAKf,yBAAKR,UAAU,UAAf,cAEF,OACE,kBAAC,IAAMS,SAAP,KACE,yBAAKT,UAAU,gCACb,yBAAKA,UAAU,aACf,0BAAMA,UAAU,wBAAhB,SACA,yBAAKA,UAAU,WACb,uBAAGA,UAAU,oBAAoBU,cAAY,SAC7C,uBAAGV,UAAU,wBAAwBU,cAAY,SACjD,uBAAGV,UAAU,oBAAoBU,cAAY,SAC7C,uBAAGV,UAAU,iCAAiCU,cAAY,YAK9D,yBAAKV,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eAGjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACZL,W,GArECgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.f19f3c19.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      blogs: [],\n    }\n  }\n  fetchBlogs = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\n    return await res.json()\n  }\n  fetchImages = async () => {\n    const res = await fetch('https://picsum.photos/v2/list?page=1&limit=100')\n    return await res.json()\n  }\n\n  mergeData = async () => {\n    let blogs = await this.fetchBlogs()\n    let imgs = await this.fetchImages()\n    for (let i = 0; i < blogs.length; i++) {\n      blogs[i].imageData = imgs[i]\n    }\n    return blogs\n  }\n\n  componentDidMount() {\n    this.mergeData()\n      .then(blogs => {\n        this.setState({blogs})\n        console.log('blogs: ', this.state.blogs)\n      })\n  }\n  render() {\n    const { blogs } = this.state\n    const cards = blogs.length ? (\n      blogs.map(blog => (\n        <div key={blog.id} className=\"card\" style={{width: '17rem'}}>\n          <div className=\"card-body\">\n          <img className=\"card-img-top img-fluid\" src={blog.imageData.download_url} alt={blog.imageData.author}/>\n            <h5 className=\"card-title\">{blog.title}</h5>\n            <p>{blog.body}</p>\n          </div>\n        </div>\n      ))\n    ) : (\n      <div className=\"center\">Loading...</div>\n    )\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-light bg-light\">\n          <div className=\"container\">\n          <span className=\"navbar-brand mb-0 h1\">Small</span>\n          <div className=\"ml-auto\">\n            <i className=\"fa fa-search px-2\" aria-hidden=\"true\"></i>\n            <i className=\"fa fa-bookmark-o px-2\" aria-hidden=\"true\"></i>\n            <i className=\"fa fa-bell-o px-2\" aria-hidden=\"true\"></i>\n            <i className=\"fa fa-user-circle-o fa-2x px-2\" aria-hidden=\"true\"></i>\n\n          </div>\n          </div>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"card-container\">\n                {cards}\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}